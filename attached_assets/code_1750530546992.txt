Halo Replit AI Agent,

Saya ingin Anda membuat aplikasi web chat interaktif yang canggih dengan fokus utama pada **kualitas kode tinggi, pengalaman pengguna yang mulus (smooth UX), dan estetika UI yang modern, profesional, dan minimalis**. Aplikasi ini akan menggunakan **Go (Golang) sebagai backend** dan **HTML, CSS, serta JavaScript murni sebagai frontend**. Aplikasi ini harus sepenuhnya mengintegrasikan **Google Gemini (model `gemini-pro` untuk teks dan `gemini-pro-vision` untuk analisis gambar)**.

**Target Utama (Hasil Akhir yang Diharapkan):**

1.  **Stabilitas & Keandalan (Bug-Free):** Aplikasi harus berfungsi penuh. Gemini harus **selalu merespons** pesan pengguna, dan alur UI harus mulus tanpa terjebak di layar mana pun.
2.  **Desain UI Profesional & Modern:** Tampilan yang sangat bersih, minimalis, dan elegan, terinspirasi kuat dari estetika UI aplikasi AI modern dan `reactbits.dev`. Fokus pada tipografi, ruang putih, dan elemen yang terdefinisi dengan baik.
3.  **Animasi Halus & Interaktif:** Implementasi transisi dan animasi harus menggunakan **CSS murni (keyframes, transitions)** dan **JavaScript DOM manipulation** untuk efek fade-in, slide-up, loading state yang menarik, dan interaksi tombol yang responsif.
4.  **Ikon Profesional & Minimalis:** Gunakan **ikon yang sangat sederhana (seperti karakter Unicode yang bisa distyling rapi)** atau hanya **teks** pada tombol. **Dilarang keras menggunakan ikon SVG kompleks, emoji yang terkesan "savage" atau "childish", atau gambar bitmap ikon yang tidak terintegrasi dengan desain minimalis.**

**Struktur Proyek:**

*   **Backend (Go):**
    *   `main.go`: File utama server Go.
    *   `go.mod` dan `go.sum`: Untuk manajemen dependensi Go.
*   **Frontend (Static Files):**
    *   `public/index.html`: Struktur HTML dasar aplikasi.
    *   `public/style.css`: Styling, palet warna, dan animasi CSS.
    *   `public/script.js`: Logika JavaScript untuk interaksi UI dan komunikasi dengan backend.

---

**1. Fungsionalitas Backend (`main.go`) - Paling Krusial: Responsivitas Gemini & Data Handling:**

*   **Dependencies:** Gunakan `github.com/google/generative-ai-go/genai`.
*   **Server HTTP:**
    *   Gunakan `net/http`.
    *   Layanan file statis dari `public/` (gunakan `http.FileServer` dan `http.StripPrefix`).
    *   Port server harus diambil dari variabel lingkungan `PORT` atau default ke `8080`.
*   **Endpoint API Chat (`/api/chat`):**
    *   **Metode:** `POST`.
    *   **Input (Sangat Penting: `multipart/form-data`):**
        *   Menerima `messages` (string JSON): Ini adalah **seluruh riwayat percakapan dari frontend**, dalam format array objek `{"role": "user"|"model", "parts": [{"text": "...", "mimeType": "...", "data": "..."}]}`. Perhatikan bahwa `data` untuk gambar lama akan menjadi **base64-encoded string**.
        *   Menerima `image` (file opsional): File gambar biner yang diunggah pengguna untuk **turn percakapan saat ini**.
        *   Menerima `prompt` (string opsional): Teks prompt yang menyertai gambar atau prompt utama jika tidak ada gambar.
    *   **API Key Gemini:**
        *   Ambil API Key dari variabel lingkungan Go: `GEMINI_API_KEY`.
        *   **Sertakan komentar yang sangat jelas** tentang cara mengatur `GEMINI_API_KEY` di Replit Secrets.
    *   **Logika Percakapan dan Model Dinamis (Sangat Penting):**
        *   **Parsing Input Teliti:**
            *   Gunakan `r.ParseMultipartForm(10 << 20)` (10MB limit) untuk mem-parse request `multipart/form-data`.
            *   Ekstrak `messages` JSON string dari `r.FormValue("messages")` dan **pastikan di-deserialize (Unmarshal) dengan benar** ke dalam struktur data Go yang sesuai (misal, `[]struct { Role string; Parts []struct { Text string; MimeType string; Data string } }`).
            *   Ekstrak `prompt` teks dari `r.FormValue("prompt")`.
            *   Dapatkan `image` file dari `r.FormFile("image")` jika ada.
        *   **Inisialisasi Client & Model:**
            *   Buat `genai.Client` dengan API Key.
            *   **Penentuan Model Dinamis:**
                *   Jika `image` file diunggah untuk permintaan saat ini: gunakan model `gemini-pro-vision`.
                *   Jika tidak ada `image` file: gunakan model `gemini-pro`.
        *   **Replikasi Riwayat Percakapan (Sangat Penting untuk Konteks):**
            *   Jika menggunakan model yang mendukung riwayat (seperti `gemini-pro`), inisialisasi **`genai.ChatSession` baru untuk setiap permintaan**.
            *   **Iterasi melalui `messages` array yang diterima dari frontend.** Untuk setiap pesan historis:
                *   Konversi setiap `part` ke `genai.Text` atau `genai.Blob` (`genai.ImageData`) yang sesuai.
                *   Jika `part` adalah gambar historis (base64-encoded), pastikan di-decode dari base64 ke `[]byte` sebelum membuat `genai.Blob` atau `genai.ImageData`.
                *   **Tambahkan semua `genai.Part`s historis ke `ChatSession` (misalnya, melalui `session.SendContent(ctx, parts...)` atau membangun `session.History()` secara manual jika SDK memerlukan itu).** Ini memastikan Gemini memiliki konteks penuh.
        *   **Kirim Pesan Terbaru:**
            *   Buat `genai.Part`s untuk `prompt` teks terbaru.
            *   Jika ada `image` yang diunggah: Baca `image` menjadi `[]byte`, deteksi `mimeType` (gunakan library Go seperti `http.DetectContentType` jika memungkinkan), dan buat `genai.ImageData` part. Kirim *kombinasi* teks dan gambar ini sebagai konten ke model `gemini-pro-vision`.
            *   Jika hanya teks: Kirim `genai.Text` part ke `ChatSession` dari model `gemini-pro`.
        *   **Dapatkan Respons & Parsing:** Ambil respons teks dari Gemini.
    *   **Output JSON:** Kembalikan respons Gemini (teks) ke frontend sebagai JSON: `{"response": "..."}`.
    *   **Error Handling (Sangat Penting untuk Debugging):**
        *   Tangani semua error (dari parsing request, inisialisasi Gemini, panggilan API, dll.).
        *   **Log error secara detail ke konsol Replit** menggunakan `log.Println(err)` atau `fmt.Printf("%+v\n", err)`.
        *   **Selalu kirim respons error yang informatif ke frontend** dalam format JSON: `{"error": "Pesan error spesifik dari backend (misal: Failed to parse input, Gemini API error: [detail])"}` dengan status HTTP yang sesuai (misal: 400 Bad Request, 500 Internal Server Error).

---

**2. Fungsionalitas Frontend (`public/index.html`, `public/style.css`, `public/script.js`) - Fokus pada UI/UX & Animasi:**

*   **`public/index.html`:**
    *   **Struktur HTML5 yang Rapi & Semantik:**
        *   `<!DOCTYPE html>`, `html lang="id"`, `head` dengan `meta charset="UTF-8"`, `meta name="viewport" content="width=device-width, initial-scale=1.0"`, `title` (misal: "Gemini Chat Clone").
        *   `body` hanya berisi satu `div` utama dengan `id="app-container"`.
        *   **Header Aplikasi:** `<header>` di dalam `app-container`.
            *   `<h1>Gemini Chat</h1>`
            *   `<p class="subtitle">Powered by Google Gemini AI</p>`
        *   **Layar Selamat Datang (Splash Screen):**
            *   `div` dengan ID `welcome-screen`. Ini akan menjadi lapisan awal yang menutupi chat.
            *   Di dalamnya:
                *   `<div class="gemini-sparkle-logo"></div>` (Ini akan dibuat dengan CSS murni, **BUKAN emoji atau gambar**).
                *   `<h1>Selamat Datang di Gemini Chat</h1>`
                *   `<p class="welcome-message-text">Asisten AI canggih dari Google. Tanyakan apa saja atau unggah gambar untuk dianalisis.</p>`
        *   **Konten Chat Utama:**
            *   `main` element di dalam `app-container`:
                *   `div` dengan ID `chat-container`: Area untuk menampilkan semua gelembung pesan. Defaultnya **tersembunyi secara visual (misal `opacity: 0; transform: translateY(20px);`)** dan akan muncul dengan animasi.
                *   `div` dengan ID `loading-indicator`: Elemen untuk menampilkan animasi "AI is typing..." atau spinner. Defaultnya tersembunyi.
                *   `div` dengan ID `error-message-area`: Untuk menampilkan pesan error dari backend. Defaultnya tersembunyi.
        *   **Area Input Chat (Selalu di Bawah):**
            *   `div` dengan ID `input-area`. **Harus memiliki CSS `position: fixed; bottom: 0; width: 100%;`** untuk selalu terlihat di bagian bawah.
            *   Di dalamnya:
                *   `textarea` dengan ID `user-input` (placeholder: "Tulis pesan atau unggah gambar...").
                *   `label` (terhubung ke `image-upload` input yang tersembunyi) yang berisi **tombol/ikon untuk unggah gambar**.
                    *   `input type="file"` dengan ID `image-upload` (`accept="image/*"`, `style="display: none;"`).
                *   `div` dengan ID `image-preview-container`: Untuk menampilkan thumbnail gambar yang dipilih. Akan berisi `img` dan tombol "X" untuk menghapus preview. Defaultnya tersembunyi.
                *   `button` dengan ID `send-button`.
        *   Sertakan `public/style.css` dan `public/script.js` di bagian akhir `body`.

    *   **`public/style.css`:**
        *   **CSS Reset & Box-sizing:**
            ```css
            * { box-sizing: border-box; margin: 0; padding: 0; }
            html, body { height: 100%; margin: 0; font-family: 'Inter', system-ui, -apple-system, BlinkMacSystemFont, "Segoe UI", Roboto, "Helvetica Neue", sans-serif; } /* Impor Inter dari Google Fonts jika tidak ada system-ui yang cocok */
            ```
        *   **Palet Warna Modern & Minimalis (Definisi Variabel CSS):**
            ```css
            :root {
                --primary-bg: #f8f9fa; /* Light gray background */
                --secondary-bg: #ffffff; /* Card/container background */
                --text-color-dark: #202124; /* Dark text */
                --text-color-light: #5f6368; /* Gray text */
                --border-color: #dadce0; /* Subtle border */
                --bubble-user-bg: #e0e7ff; /* Light blue for user message */
                --bubble-model-bg: #f1f3f4; /* Light gray for AI message */
                --accent-color: #4285f4; /* Google Blue for primary actions */
                --error-color: #d32f2f; /* Red for errors */
                --error-bg: #ffebee; /* Light red for error background */
            }
            ```
        *   **Layout Utama (`app-container`):** `display: flex; flex-direction: column; height: 100vh; background: var(--primary-bg);`
        *   **Header Aplikasi:** `background: var(--secondary-bg); padding: 15px; text-align: center; border-bottom: 1px solid var(--border-color); box-shadow: 0 1px 2px rgba(0,0,0,0.05);`
            *   `h1`: `font-size: 24px; color: var(--text-color-dark); font-weight: 500;`
            *   `.subtitle`: `font-size: 14px; color: var(--text-color-light); margin-top: 4px;`
        *   **`welcome-screen` Styling & Animasi:**
            *   `position: absolute; top: 0; left: 0; right: 0; bottom: 0; background: var(--secondary-bg); display: flex; flex-direction: column; justify-content: center; align-items: center; text-align: center; padding: 20px; z-index: 100; opacity: 1; transform: translateY(0); transition: opacity 0.5s ease-out, transform 0.5s ease-out;`
            *   `.welcome-screen.hidden { opacity: 0; transform: translateY(-20px); pointer-events: none; }`
            *   **CSS-Only Gemini Sparkle Logo (`.gemini-sparkle-logo`):**
                ```css
                .gemini-sparkle-logo {
                    width: 60px; height: 60px; /* Ukuran dasar */
                    position: relative; /* Untuk pseudo-elements */
                    margin-bottom: 20px;
                    /* Contoh sederhana bintang 4 titik dengan CSS murni */
                    background-color: transparent; /* Atau warna dasar */
                    border-left: 10px solid transparent;
                    border-right: 10px solid transparent;
                    border-bottom: 18px solid #FFC107; /* Warna kuning */
                    transform: rotate(35deg); /* Rotasi untuk efek sparkle */
                }
                .gemini-sparkle-logo::before {
                    content: '';
                    position: absolute;
                    top: -10px; left: -10px; right: -10px; bottom: -10px;
                    border-left: 10px solid transparent;
                    border-right: 10px solid transparent;
                    border-bottom: 18px solid #FFC107;
                    transform: rotate(-70deg);
                }
                /* Tambahan sparkle kecil untuk efek 3 bintang */
                .gemini-sparkle-logo::after {
                    content: '';
                    position: absolute;
                    width: 15px; height: 15px;
                    background-color: #FFC107;
                    border-radius: 50%; /* Bulat kecil */
                    top: -5px; right: -25px; /* Posisi relatif ke sparkle utama */
                    opacity: 0.8;
                    transform: scale(0.6) rotate(45deg);
                    box-shadow: 15px 15px #FFC107; /* Sparkle kedua */
                }
                ```
            *   `h1` di `welcome-screen`: `font-size: 32px; color: var(--text-color-dark); margin-bottom: 10px;`
            *   `.welcome-message-text`: `font-size: 18px; color: var(--text-color-light); max-width: 600px; line-height: 1.5;`
        *   **`chat-container` Styling & Animasi (Sangat Penting):**
            *   `flex-grow: 1; overflow-y: auto; padding: 20px; display: flex; flex-direction: column; gap: 10px; /* Untuk spasi antar pesan */`
            *   `background: var(--primary-bg);`
            *   **Initial Hidden State:** `opacity: 0; transform: translateY(20px); transition: opacity 0.5s ease-out, transform 0.5s ease-out;` (akan diubah oleh JS).
            *   `.chat-container.visible { opacity: 1; transform: translateY(0); }`
        *   **Chat Messages (`.message`, `.user-message`, `.model-message`):**
            *   `max-width: 80%; padding: 12px 18px; border-radius: 18px; line-height: 1.6; position: relative; word-wrap: break-word;`
            *   `box-shadow: 0 1px 3px rgba(0,0,0,0.08);` (bayangan lembut).
            *   **Animasi CSS (`reactbits.dev` style - diterapkan ke setiap pesan baru):**
                ```css
                @keyframes message-appear {
                    from { opacity: 0; transform: translateY(15px); }
                    to { opacity: 1; transform: translateY(0); }
                }
                .message {
                    animation: message-appear 0.3s ease-out forwards; /* Diterapkan via JS saat dirender */
                }
                ```
            *   `.user-message`: `background: var(--bubble-user-bg); align-self: flex-end; border-bottom-right-radius: 4px; color: var(--text-color-dark);`
            *   `.model-message`: `background: var(--bubble-model-bg); align-self: flex-start; border-bottom-left-radius: 4px; color: var(--text-color-dark);`
            *   Gambar di dalam pesan: `max-width: 100%; height: auto; border-radius: 8px; margin-top: 8px; display: block;`
        *   **`input-area` Styling:**
            *   **Penting:** `position: fixed; bottom: 0; left: 0; right: 0; width: 100%; background: var(--secondary-bg); padding: 15px 20px; border-top: 1px solid var(--border-color); display: flex; align-items: flex-end; gap: 10px; box-shadow: 0 -2px 5px rgba(0,0,0,0.03); z-index: 90;`
        *   **`user-input` (`textarea`):**
            *   `flex-grow: 1; padding: 12px 18px; border: 1px solid var(--border-color); border-radius: 24px; resize: none; overflow-y: auto; max-height: 120px; font-size: 16px; line-height: 1.5; color: var(--text-color-dark); transition: border-color 0.2s ease, box-shadow 0.2s ease;`
            *   `user-input:focus`: `border-color: var(--accent-color); box-shadow: 0 0 0 3px rgba(66, 133, 244, 0.15); outline: none;`
        *   **Tombol (Send, File Upload) - Ikon Profesional & Minimalis:**
            *   **Ukuran & Bentuk Konsisten:** `width: 48px; height: 48px; border-radius: 50%; display: flex; justify-content: center; align-items: center; cursor: pointer; transition: background 0.2s ease, transform 0.2s ease; border: none;`
            *   `button:hover:not(:disabled) { transform: scale(1.05); }`
            *   `button:disabled { opacity: 0.6; cursor: not-allowed; }`
            *   **`send-button`:** `background: var(--accent-color); color: white; font-size: 20px;` **Isi teks atau karakter Unicode:** Gunakan `&#x27A4;` (Black Right-Pointing Triangle) yang diatur `line-height` dan `padding` agar terlihat di tengah dan rapi.
            *   **Tombol Unggah Gambar (`label` yang mengelilingi input file):** `background: var(--bubble-model-bg); color: var(--text-color-dark); font-size: 20px;` **Isi teks atau karakter Unicode:** Gunakan `&#128444;` (Frame With Picture) atau `&#128247;` (Camera) atau `&#128206;` (Paperclip) yang distyling agar pas di tengah.
            *   **Tombol Hapus Preview (`clear-image-preview`):** Kecil, bulat, posisi absolut di sudut preview. Gunakan `&times;` (kali) atau `&#x2715;` (Multiplication X) sebagai ikon.
        *   **`image-preview-container`:** `background: var(--bubble-model-bg); padding: 10px; border-radius: 15px; margin-bottom: 10px; display: flex; align-items: center; gap: 10px; opacity: 0; transform: translateY(10px); transition: opacity 0.3s ease-out, transform 0.3s ease-out;` (sembunyikan secara default).
            *   `.image-preview-container.visible { opacity: 1; transform: translateY(0); }`
        *   **`loading-indicator` (AI Typing...):**
            *   Styling mirip gelembung chat AI, dengan 3 titik animasi (dot-pulse).
            *   ```css
              .loading-indicator {
                  display: none; /* Sembunyikan default */
                  align-self: flex-start;
                  background: var(--bubble-model-bg);
                  padding: 12px 18px;
                  border-radius: 18px;
                  border-bottom-left-radius: 4px;
                  margin-bottom: 10px;
                  box-shadow: 0 1px 3px rgba(0,0,0,0.08);
                  animation: message-appear 0.3s ease-out forwards; /* Saat muncul */
              }
              .loading-indicator span.dot {
                  display: inline-block;
                  width: 8px; height: 8px;
                  border-radius: 50%;
                  background-color: var(--text-color-light);
                  margin: 0 2px;
                  animation: dot-pulse 0.8s infinite ease-in-out;
              }
              .loading-indicator span.dot:nth-child(2) { animation-delay: 0.1s; }
              .loading-indicator span.dot:nth-child(3) { animation-delay: 0.2s; }

              @keyframes dot-pulse {
                  0%, 100% { transform: translateY(0); opacity: 0.6; }
                  50% { transform: translateY(-4px); opacity: 1; }
              }
              ```
        *   **Error Message Area:** `background: var(--error-bg); color: var(--error-color); padding: 10px; border-radius: 8px; margin-bottom: 10px; text-align: center; font-size: 14px; opacity: 0; transition: opacity 0.3s ease-out;` (sembunyikan default).
            *   `.error-message-area.visible { opacity: 1; }`
        *   **Responsif:** Gunakan `@media` queries untuk penyesuaian di layar kecil (`font-size`, `padding`).

    *   **`public/script.js`:**
        *   **State Management:**
            *   `const messages = [];` (array untuk riwayat percakapan). Objek pesan harus dalam format yang sama dengan yang dikirim ke backend, termasuk Base64 untuk gambar historis.
            *   `let selectedImageFile = null;`
        *   **DOM Element References:** Dapatkan semua referensi ke elemen UI.
        *   **Alur UI Utama (Sangat Penting untuk Pengalaman Mulus):**
            *   **`DOMContentLoaded`:** Tampilkan `welcome-screen`.
            *   **Fungsi `showChatUI()`:** Fungsi ini akan dipanggil **setelah respons pertama dari Gemini diterima**. Di dalamnya:
                1.  Tambahkan kelas `hidden` ke `welcome-screen` (`welcomeScreen.classList.add('hidden');`).
                2.  Gunakan `setTimeout(() => { welcomeScreen.style.display = 'none'; chatContainer.classList.add('visible'); inputArea.classList.add('visible'); }, 500);` (sesuaikan durasi dengan transisi CSS).
                3.  Pastikan `chat-container` dan `input-area` memiliki kelas CSS `visible` atau properti `display: flex/block` agar terlihat.
        *   **`renderMessage(message)` Function:**
            *   Menerima objek pesan (`{ role: "user"|"model", parts: [{text: "", mimeType: "", data: ""}] }`).
            *   Buat elemen `div.message` baru.
            *   Tambahkan kelas CSS yang sesuai (`user-message` atau `model-message`).
            *   Iterasi `message.parts`:
                *   Jika `part.text` ada, buat `p` elemen.
                *   Jika `part.mimeType` dan `part.data` ada, buat `img` elemen dan set `src` ke `data:mimeType;base64,data`.
            *   Append pesan ke `chat-container`.
            *   **Penting:** Panggil `setTimeout(() => { newMessageDiv.classList.add('animate-in'); }, 10);` untuk memicu animasi CSS `message-appear`.
            *   Panggil `autoScrollChat()`.
        *   **`sendMessage()` Function (Async - Sangat Teliti):**
            *   Dapatkan teks dari `user-input` dan `selectedImageFile`.
            *   Validasi input (misal: jika kosong, jangan kirim).
            *   **UI Feedback (Awal):**
                *   Tampilkan `loading-indicator` (`loadingIndicator.style.display = 'flex';`).
                *   Disable `send-button` dan `user-input`.
                *   Sembunyikan `error-message-area` (`errorMessageArea.classList.remove('visible');`).
            *   **Update `messages` array (frontend state):** Tambahkan pesan pengguna (dengan teks dan jika ada gambar lokal URL) ke array `messages`. **Ini penting untuk rendering lokal dan menjaga riwayat.**
            *   **Buat `FormData` (Sangat Penting):**
                *   `const formData = new FormData();`
                *   `formData.append('prompt', userInput.value);`
                *   **Serialisasi Riwayat `messages` ke JSON string:**
                    *   Buat **array baru** yang akan di-string-ify.
                    *   Untuk setiap pesan dalam `messages` array, konversi `parts` gambar (jika ada) ke Base64 (jika belum) agar bisa dikirim kembali ke backend.
                    *   `formData.append('messages', JSON.stringify(formattedMessagesHistory));`
                *   Jika `selectedImageFile` ada: `formData.append('image', selectedImageFile);`
            *   **Kirim Fetch Request:**
                *   `const response = await fetch('/api/chat', { method: 'POST', body: formData });`
                *   `const data = await response.json();`
            *   **Tangani Respons:**
                *   **Jika `data.error` ada:** Tampilkan error di `error-message-area` (`errorMessageArea.innerText = data.error; errorMessageArea.classList.add('visible');`). Log ke konsol browser.
                *   **Jika sukses (`data.response` ada):**
                    *   Jika ini adalah **pesan pertama** yang berhasil dibalas Gemini: Panggil `showChatUI();`.
                    *   Tambahkan respons AI ke array `messages` frontend.
                    *   Panggil `renderMessage()` untuk respons AI.
            *   **Bersihkan UI Feedback (Akhir):**
                *   Sembunyikan `loading-indicator` (`loadingIndicator.style.display = 'none';`).
                *   Enable `send-button` dan `user-input`.
                *   Kosongkan `user-input` (`userInput.value = '';`).
                *   Kosongkan `selectedImageFile`, sembunyikan dan kosongkan `image-preview-container`.
        *   **Event Listeners:**
            *   `send-button`: `click` event -> panggil `sendMessage()`.
            *   `user-input`: `keypress` (untuk Enter key, pastikan Shift+Enter membuat baris baru).
            *   `image-upload`: `change` event -> untuk menampilkan preview gambar.
            *   `clear-image-preview`: `click` event -> untuk menghapus preview.
        *   **Image Preview Logic:** Gunakan `URL.createObjectURL()` untuk menampilkan gambar di `image-preview`. Tambahkan dan hapus kelas `visible` untuk `image-preview-container` agar animasinya muncul.
        *   **`autoScrollChat()` Function:** Pastikan `chatContainer.scrollTop = chatContainer.scrollHeight;` bekerja dengan baik setelah setiap pesan baru.

---

**3. Instruksi Pengguna Akhir (Tambahan di Readme/Komentar):**

*   **Pentingnya API Key:** Ingatkan lagi tentang `GEMINI_API_KEY` di Replit Secrets. Berikan contoh cara menambahkannya.
*   **Menjalankan Aplikasi:** Jelaskan cara Replit menjalankan Go (`go run main.go`).
*   **Keterbatasan Gemini:** Tekankan kembali bahwa Gemini **tidak menghasilkan gambar**, hanya menganalisis dan memahami.

---

Prompt ini sangat rinci dan mencoba mengantisipasi potensi kesalahan yang pernah terjadi. Ini adalah permintaan yang kompleks, jadi proses generasinya mungkin memerlukan waktu. Bersiaplah untuk meninjau log Replit dengan teliti jika ada masalah setelah kode dihasilkan.

Semoga berhasil! Saya menantikan hasilnya.